from conans import ConanFile, CMake, tools, errors
import os, re

def find_all_headers(root):
    result = []
    entries = os.walk(root)
    for entry in entries:
        for file in entry[2]:
            if file.endswith('.h'):
                result.append(os.path.join(entry[0], file))

    return result

def fix(all_headers, src):
    f = open(src, "r")

    base = os.path.dirname(src)

    regex = r'^#include\s*"([^"]*)"'    
    result = ""

    for line in f:
        match = re.match(regex, line)
        if match:
            if not os.path.exists(os.path.join(base, match.group(1))):
                matches = [x for x in all_headers if os.path.basename(x) == os.path.basename(match.group(1))]
                if len(matches) == 1:
                    relpath = os.path.relpath(matches[0], base)
                    result += '#include "%s"\n' % relpath
                    continue
        result += line

    f.close()

    f = open(src, "w")
    f.write(result) 

class SkiaConan(ConanFile):
    name = "skia"
    version = "master"
    license = "<Put the package license here>"
    author = "Marcus Tillmanns <maddimax@gmail.com>"
    url = "https://github.com/Maddimax/conan-skia.git"
    description = "A 2D/3D Vector rendering engine"
    topics = ("render", "vector", "2d", "3d")
    settings = "os", "compiler", "build_type", "arch"
    options = {"shared": [True, False],
                "metal" : [True, False],
                "gpu" : [True, False]}
    default_options = {"shared":False, "metal" : False, "gpu" : True}
    generators = "cmake"

    scm = {
        "type": "git",
        "url": "auto",
        "revision": "auto",
        "submodule" : "shallow"
    }

    revision_mode = "scm"

    def source(self):
        # Fix include paths ...
        print("Fixing headers:")
        all_headers = find_all_headers(os.path.join(self.source_folder, "skia"))
        for header in all_headers:
            fix(all_headers, header)
        
        if len(all_headers) == 0:
            print("Error: No header files found")
            exit(1)

        print("Fixed %i files" % (len(all_headers)))

        # Fetch dependencies
        self.run('/usr/local/bin/python skia/tools/git-sync-deps')

        # Generate CMakeLists.txt
        opts = []
        if self.options.metal:
            opts += ["skia_use_metal=true"]
        if self.options.gpu:
            opts += ["skia_enable_gpu=true"]

        if len(opts) > 0:
            opts = '"--args=%s"' % " ".join(opts)
        else 
            opts = ""

        self.run('$PWD/skia/bin/gn gen skia/out/config %s --ide=json --json-ide-script=../../gn/gn_to_cmake.py --root=./skia' % opts)

        # Inject conan stuff
        tools.replace_in_file("skia/out/config/CMakeLists.txt", "# Generated by gn_to_cmake.py.",
                                  '''# Generated by gn_to_cmake.py.
project(skia)
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()''')

        # Add missing compile options
        with open("skia/out/config/CMakeLists.txt", "a") as f:
            r = ""
            if self.settings.os == "iOS" or self.settings.os == "Macos":
                r += '\n'
                r += 'target_compile_options(skia PUBLIC "-fobjc-arc")\n'
                if self.options.metal or self.options.gpu:
                    r += 'target_compile_options(gpu PUBLIC "-fobjc-arc")\n'
                    r += 'target_compile_options(gpu_tool_utils PUBLIC "-fobjc-arc")\n'

            f.write(r)

    def configure(self):
        if self.options.metal:
            if not self.settings.os == "iOS" and not self.settings.os == "Macos":
                raise errors.ConanInvalidConfiguration("Metal is only supported on darwin platforms: %s" % self.settings.os) 

    def build(self):
        cmake = CMake(self)
        cmake.configure(source_folder="skia/out/config")
        cmake.build(target="skia")

    def package(self):
        self.copy("*.h", dst="include/skia", src="skia", keep_path=True)
        self.copy("*.dll", dst="bin", src="lib",keep_path=False)
        self.copy("*.so", dst="lib", src="lib",keep_path=False)
        self.copy("*.dylib", dst="lib", src="lib",keep_path=False)
        self.copy("*.a", dst="lib", src="lib", keep_path=False)

    def package_info(self):
        self.cpp_info.libs = [
            "skia",
            "third_party__dng_sdk",
            "third_party__expat",
            "third_party__icu",
            "third_party__libjpeg-turbo_libjpeg",
            "third_party__libpng",
            "third_party__libwebp",
            "third_party__libwebp_libwebp_sse41",
            "third_party__piex",
            "third_party__sfntly",
            "third_party__spirv-tools",
            "third_party__zlib",
            "third_party__zlib_zlib_x86"
        ]
